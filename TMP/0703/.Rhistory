a$p.value
a$alternative
a$parameter
a1 <- t.test(OneSample,mu=8.1,alternative = "greater")
a1
a1 <- t.test(OneSample,mu=8.1,alternative = "greater",level=0.99)
a1
a1 <- t.test(OneSample,mu=8.1,alternative = "greater")
a2 <- t.test(OneSample,mu=8.1,conf.level = 0.99)
a2
DF <- read.csv("movie_MBA2.csv",stringsAsFactors = F)
names(DF)
unqiue(DF$rating)
unique(DF$rating)
t.test(mean(DF[DF$rating =="15세이상관람가",]$production),conf.level = 0.90)
DF[DF$rating =="15세이상관람가",]$production
DF[DF$rating =="15세이상관람가",]$total_seen
t.test(mean(DF[DF$rating =="15세이상관람가",]$total_seen),conf.level = 0.90)
t.test(DF[DF$rating =="15세이상관람가",]$total_seen,conf.level = 0.90)
t.test(DF[DF$rating =="15세이상관람가",]$total_seen,conf.level = 0.95)
t.test(DF[DF$rating =="15세이상관람가",]$total_seen,conf.level = 0.95)
DF15 <- DF[DF$rating=="15세이상관람가",]
DF15
t.test(DF15$total_seen,conf.level = 0.95)
shapiro.test(DF$total_seen)
t.test(DF15$total_seen,conf.level = 0.95,alternative = "greater")
hist(DF$total_seen,20)
str(DF)
t.test(DF15$total_seen,conf.level = 0.95,mu=1500000)
t.test(DF15$total_seen,conf.level = 0.95,mu=1500000,alternative = "greater")
DFRe <- t.test(DF15$total_seen,conf.level = 0.95,mu=1500000,alternative = "greater")
DFRe$p.value
DFRe2 <- t.test(DF15$total_seen,conf.level = 0.95,mu=1500000)
DFRe2$alternative
DFRe2$conf.int
rm(list=ls())
DT <- read.csv("dental.csv",stringsAsFactors = F)
DT
boxplot(resp~treatment,data=DT)
boxplot(log(resp)~treatment,data=DT)
par(mfcol=c(1,2))
boxplot(log(resp)~treatment,data=DT)
boxplot(log(resp)~treatment,data=DT)
boxplot(resp~treatment,data=DT)
boxplot(log(resp)~treatment,data=DT)
var.test(log(resp)~treatment, data=DT)
vt <- var.test(log(resp)~treatment, data=DT)
vt$alternative
t.test(log(resp)~treatment,data=DT)
t.test(resp~treatment,data=DT)
var.test(resp~treatment, data=DT)
a <- t.test(resp~treatment,data=DT)
a$p.value
a$alternative
a$parameter
a$conf.int
a$conf.int[1]
FT <- read.csv("FT.csv",stringsAsFactors = F)
FT
summary(FT)
str(FT)
FT$Gap <- FT$Postwt - FT$Prewt
FT$Gap
FT
with(FT,boxplot(Postwt - Prewt))
boxplot(FT$Gap)
with(FT,t.test(Postwt - Prewt,alternative = "greater"))
t.test(Gap,data=FT, alternative = "greater")
t.test(FT$Gap,data=FT, alternative = "greater")
t.test(FT$Gap, alternative = "greater")
Earning <- read.csv("Earnings.csv",stringsAsFactors = F)
head(Earning)
with(Earning,boxplot(Acutal - Predicted))
with(Earning,boxplot(Actual - Predicted))
with(Earning,t.test(Actual - Predicted,alternative = "greater"))
MV <- read.csv("movie_MBA2.csv",stringsAsFactors = F)
MVAg <- aggregate(total_seen~rating,MVAg,mean)
MVAg <- aggregate(total_seen~rating,MV,mean)
MVAg
MV15 <- MV[MV$rating="15세이상관람가",]
MV15 <- MV[MV$rating="15세이상관람가",]
MV <- read.csv("movie_MBA2.csv",stringsAsFactors = F)
MV15 <- MV[MV$rating="15세이상관람가"]
MV15 <- MV[MV$rating=="15세이상관람가",]
MV12 <- MV[MV$rating=="12세이상관람가",]
MV1215 <- MV[MV$rating=="15세이상관람가"|MV$rating=="12세이상관람",]
unique(MV1215$rating)
MV1215 <- MV[MV$rating=="15세이상관람가"|MV$rating=="12세이상관람",]
MV1215 <- MV[MV$rating=="15세이상관람가"|MV$rating=="12세이상관람가",]
unique(MV1215$rating)
boxplot(total_seen~rating,MV1215)
boxplot(total_seen~rating,MV1215,labels=c("12세이상관람가","15세이상관람가"))
MV1215$rating <- factor(MV1215$rating,labels=c("12세이상관람가","15세이상관람가"))
boxplot(total_seen~rating,MV1215)
var.test(total_seen~rating,MV1215)
boxplot(log(total_seen)~rating,MV1215)
var.test(log(total_seen)~rating,MV1215)
t.test(total_seen~rating,MV1215)
t.test(log(total_seen)~rating,MV1215)
t.test(total_seen~rating,MV1215,alternative="less")
t.test(log(total_seen)~rating,MV1215,alternative="less")
t.test(total_seen~rating,MV1215,alternative="less")  #12세 - 15세가 0보다 작아야되므로 less를 적용.
t.test(log(total_seen)~rating,MV1215,var.equal = T,alternative="less")
boxplot(Earning$Actual - Earning$Predicted)
t.test(Earning$Actual - Earning$Predicted)
NROW(Earning)
Earning
mean(Earning$Actual)
mean(Earning$Predicted)
prop.test(67,120)
rm=list(ls())
rm(list=ls())
a <- prop.test(67,120)
a$estimate
67/120
a <- prop.test(67,120,p = 0.6)
a
a1 <- prop.test(67,120,p = 0.8)
a1
a1 <- prop.test(67,120,p = 0.7)
a1
prop.test(c(60,120),c(150,250),alter="less")
?prop.test
60/150
matricx(c(33,28,5,67,122,45),3,2)
matrix(c(33,28,5,67,122,45),3,2)
DE <- matrix(c(33,28,5,67,122,45),3,2)
DE
chisq.test(DE)
TP <- matrix(c(48,16,20,40),2,2)
TP
TP <- matrix(c(48,16,20,40),2,2,byrow = T)
TP
TP <- addmargins(TP)
TP
class(TP)
colnames(TP)
colnames(TP) <- c("0","1","합")
rownames(TP) <- c("Placebo","Test")
TP
rownames(TP) <- c("Treat","Placebo","Test")
TP
NY <- read.csv("NYReform.csv",stringsAsFactors = F)
str(NY)
NY
tab1 <- xtabs(~Pay.Cut + Party, data=NY)
tab1
chisq.test(tab1)
mosaicplot(tab1)
par(mfcol=c(1,1))
mosaicplot(tab1)
mosaicplot(t(tab1))
chisq.test(tab1)
tab2 <- xtabs(~Lobbyist + Party, NY)
names(NY)
tab2 <- xtabs(~Lobbyists + Party, NY)
tab2
chisq.test(tab2)
mosaicplot(tab2)
mosaicplot(t(tab2)
mosaicplot(t(tab2))
mosaicplot(t(tab2))
tab3 <- xtabs(~Term.Limits+Party,NY)
tab3
chisq.test(tab3)
mosaicplot(t(tab3))
tab2
chisq.test(tab2)   # 크게 정당별로 관계가 없다. 독립이다.
par(las=1)
mosaicplot(t(tab3))
prop.test(tab2[,1],alter="less")
tab2 <- addmargins(tab2,1)
tab2
prop.test(tab2[c(1,2),1],tab2[3,1],alter="less")
prop.test(tab2[c(1,1),1],tab2[3,1],alter="less")
prop.test(tab2[1,1],tab2[3,1],alter="less")
prop.test(tab2[1,1],tab2[3,1])
tab2
prop.test(c(17,32),c(36,45),alter="less")
var.test(log(resp)~treatment, data=DT)  # alternative : true ratio of variances is not equal to 1
DT <- read.csv("dental.csv",stringsAsFactors = F)
par(mfcol=c(1,2))
boxplot(resp~treatment,data=DT)
boxplot(log(resp)~treatment,data=DT)
var.test(log(resp)~treatment, data=DT)  # alternative : true ratio of variances is not equal to 1
t.test(log(resp)~treatment,var.equal=T,data=DT)
var.test(resp~treatment, data=DT) # 기각
t.test(resp~treatment,data=DT) # 기각
MV <- read.csv("movie_MBA2.csv",stringsAsFactors = F)
MV1215 <- MV[MV$rating=="15세이상관람가"|MV$rating=="12세이상관람가",]
unique(MV1215$rating)
MV1215$rating <- factor(MV1215$rating,labels=c("12세이상관람가","15세이상관람가")) #rating에 원래 다른 levels가 존재한걸 없애준다.
boxplot(total_seen~rating,MV1215)
boxplot(log(total_seen)~rating,MV1215)
var.test(total_seen~rating,MV1215)
var.test(log(total_seen)~rating,MV1215)
Earning <- read.csv("Earnings.csv",stringsAsFactors = F)
head(Earning)
with(Earning,boxplot(Actual - Predicted))
with(Earning,t.test(Actual - Predicted,alternative = "greater"))
summary(FT)
FT <- read.csv("FT.csv",stringsAsFactors = F)
str(FT)
shapiro.test(FT$Postwt-FT$Prewt)
with(FT, shapiro.test(Postwt-Prewt))  #2개의 값을 한번에 사용하려면 with 가 필요.
with(FT,boxplot(Postwt - Prewt))
boxplot(FT$Postwt-FT$Prewt)
with(FT,boxplot(Postwt - Prewt))
boxplot(FT$Gap)
FT$Gap <- FT$Postwt - FT$Prewt
FT
boxplot(FT$Gap)
boxplot(FT$Postwt-FT$Prewt)
with(FT,t.test(Postwt - Prewt,alternative = "greater"))
with(Earning,boxplot(Actual - Predicted))
with(Earning,t.test(Actual - Predicted,alternative = "greater"))
boxplot(Earning$Actual - Earning$Predicted)
t.test(Earning$Actual - Earning$Predicted)
with(Earning,t.test(Actual - Predicted,alternative = "greater"))
t.test(Earning$Actual - Earning$Predicted)
rm(list=ls())
a <- prop.test(67,120)
a
prop.test(67,120)
prop.test(67,120,p = 0.7)   #p-value : 0.001013
prop.test(c(60,120),c(150,250),alter="less")  # c(x1,x2) c(n1,n2)
#유의할 만큼 증가하지 않았다라고 볼 수 있다.
prop.test(c(60,120),c(150,250),alter="less")  # c(x1,x2) c(n1,n2)
DE
DE <- matrix(c(33,28,5,67,122,45),3,2)
DE
colnames(DE)
colnames(DE) <- c("있다","없다")
rownames(DE) <- c("저소득","중간층","고소득")
DE
chisq.test(DE)  #독립성 테스트.   p-value = 0.002222    귀무를 기각 => 독립적이지 않다.
TP <- matrix(c(48,16,20,40),2,2,byrow = T)
TP <- addmargins(TP)
class(TP)
colnames(TP) <- c("0","1","합")
rownames(TP) <- c("Treat","Placebo","Test")
TP
respire
NY <- read.csv("NYReform.csv",stringsAsFactors = F)   # 찬성 : 1, 반대 : 2
str(NY)
tab1 <- xtabs(~Pay.Cut + Party, data=NY)
tab1 <- xtabs(~Pay.Cut + Party, data=NY)
chisq.test(tab1)
tab1
chisq.test(tab1)
par(las=1)
par(mfcol=c(1,1))
mosaicplot(tab1)
mosaicplot(t(tab1))
par(mfcol=c(1,2))
mosaicplot(tab1)
mosaicplot(t(tab1))
tab2 <- xtabs(~Lobbyists + Party, NY)
tab2
chisq.test(tab2)   # 크게 정당별로 관계가 없다. 독립이다.
mosaicplot(tab2)
mosaicplot(t(tab2))
tab2 <- addmargins(tab2,1)
tab2
prop.test(tab2[1,1],tab2[3,1])   # equal  21,36 에서 p=0.5
ab3 <- xtabs(~Term.Limits+Party,NY)
ab3
chisq.test(tab3)  # 기각 X 독립
tab3 <- xtabs(~Term.Limits+Party,NY)
chisq.test(tab3)  # 기각 X 독립
mosaicplot(t(tab3))
tab3 <- addmargins(tab3,1)
tab3
prop.test(c(17,32),c(36,45),alter="less")  #귀무가설 기각. H0 : 두 비율의 차이가 없다.
a <- prop.test(c(17,32),c(36,45),alter="less")
a$parameter
a$estimate
a$estimate[1]
a$estimate[1] - a$estimate[2]
prop.test(tab2[1,1],tab2[3,1])   # equal  21,36 에서 p=0.5  p-value = 0.4047 귀무 참. 0.5의 유의수준에 있다.
prop.test(c(60,120),c(150,250),alter="less")  # c(x1,x2) c(n1,n2)
a <- prop.test(c(17,32),c(36,45),alter="less")
prop.test(c(17,32),c(36,45),alter="less")  #귀무가설 기각. H0 : 두 비율의 차이가 없다.
boxplot(tips$tip,horizontal = T)
library("reshape")
tips <- tips
boxplot(tips$tip,horizontal = T)
par(mfcol=c(1,1))
boxplot(tips$tip,horizontal = T)
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec(uesr=F)
IRkernel::installspec(user=F)
IRkernel::installspec(name = 'ir33', displayname = 'R 3.3', user=F)
R.version
IRkernel::installspec(name = 'ir32', displayname = 'R 3.2')
library("IRkernel")
IRkernel::installspec(name = 'ir32', displayname = 'R 3.2')
install.packages(c('pbdZMQ', 'repr', 'devtools'))  # repr is already on CRAN
install.packages(c("pbdZMQ", "repr", "devtools"))
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec(name = 'ir32', displayname = 'R 3.2')
devtools::install_github('IRkernel/IRkernel')
install.packages(c('rzmq','repr','IRkernel','IRdisplay'), repos = c('http://irkernel.github.io/', getOption('repos')), type = 'source')
IRkernel::installspec()
library(IRkernel)
install.packages(c('pbdZMQ', 'repr', 'devtools'))  # repr is already on CRAN
devtools::install_github('IRkernel/IRkernel')
IRkernel::installspec()  # to register the kernel in the current R installation
IRkernel::installspec(name = 'ir32', displayname = 'R 3.2')
IRkernel::installspec(name = 'ir33', displayname = 'R 3.3')
IRkernel::installspec(name = 'ir32', displayname = 'R 3.2')
devtools::install_github('IRkernel/IRdisplay')
devtools::install_github('IRkernel/IRdisplay', force = T)
IRkernel::installspec()  # to register the kernel in the current R installation
IRkernel::installspec(user = FALSE) # to register the kernel in the current R installation
IRkernel::installspec(user = FALSE) # to register the kernel in the current R installation
IRkernel::installspec(user = FALSE) # to register the kernel in the current R installation
IRkernel::installspec()
IRkernel::installspec(user = FALSE) # to register the kernel in the current R installation
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"),
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"),
repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"),
21
1
3
install.packages(c('rzmq','repr','IRkernel','IRdisplay'), repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"),
)\
install.packages(c('rzmq','repr','IRkernel','IRdisplay'), repos = c('http://irkernel.github.io/', getOption('repos')))
install.packages(c("rzmq", "repr", "IRkernel", "IRdisplay"),
()
jupyter qtconsole --kernel=ir
install.packages("reshape")
library("reshape")
tips <- tips
str(tips)
summary(tips) #평균과 중간값 이런것을 계산 해주는거는 양적변수, 아닐경우 질적변수
tips$size <- factor(tips$size)
summary(tips) #평균과 중간값 이런것을 계산 해주는거는 양적변수, 아닐경우 질적변수
IQR(tips$tip)
str(tips)
mean(tips2$tip)
median(tips2$tip)
mean(tips$tip)
var(tips$tip)
sd(tips$tip)   # x bar + - 2sd => 95%
unique(tips$day)
mytable <- table(tips$day)
mytable
IQR(tips$tip)
boxplot(tips$tip,horizontal = T)
hist(tips$tip,20)
barplot(tips$tip,xlim=c(0,10))
barplot(table(tips$day))
boxplot(tip~day,data=tips, ylab="tips",xlab="day") #종속 tip 설명 day
plot(tip~total_bill,tips)
plot(tips$total_bill,tips$tip)
cor(tips$tip,tips$total_bill)
cor(tips$tip,tips$total_bill)
DF <- read.csv("movie_MBA2.csv",stringsAsFactors = F)
head(DF,3)
View(DF)
str(DF)
boxplot(DF$total_seen)
unique(DF$rating)
barplot(agratingSeen[,2],names.arg = agratingSeen[,1],legend.text = "관객수",main = "등급에 따른 관객수")
agratingSeen <- aggregate(total_seen~rating,data = DF,mean)
agratingSeen
barplot(agratingSeen[,2],names.arg = agratingSeen[,1],legend.text = "관객수",main = "등급에 따른 관객수")
barplot(agratingSale[,2],names.arg = agratingSale[,1],legend.text = "수익",main = "등급에 따른 수익")
agratingSale <- aggregate(total_sales~rating,data = DF,mean)
barplot(agratingSeen[,2],names.arg = agratingSeen[,1],legend.text = "관객수",main = "등급에 따른 관객수")
agratingSale <- aggregate(total_sales~rating,data = DF,mean)
barplot(agratingSale[,2],names.arg = agratingSale[,1],legend.text = "수익",main = "등급에 따른 수익")
class(agratingSale)
boxplot(total_seen~rating,data=DF, ylab="CNT",xlab="rating")
range(DF$total_seen)
tableOfRating <- table(DF$rating)
tableOfRating
barplot(tableOfRating,ylab="CNT",xlab="Rating")
summary(DF$total_seen)
boxplot(DF$total_seen,horizontal = T)
hist(DF$total_seen,20)
par(mfcol=c(1,2))
boxplot(DF$total_seen,horizontal = T)
hist(DF$total_seen,20)
par(mfcol=c(1,1))
par(las=2,mar=c(10,5,5,5))
boxplot(total_seen~rating,DF)
library("plyr")
msales <- ddply(DF,~rating,summarize,mean_sales=mean(total_sales))
msales
barplot(msales[,2],names.arg = msales[,1])
mosaicplot(tab,cex.axis = 1.0)
mosaicplot(t(tab),cex.axis = 1.0)
tab <- xtabs(~genre+rating,DF)  # cross table
tab
rm(list=ls())
library(reshape)
tips <- tips
t99 <- t.test(tips$total_bill,conf.level = 0.99)  # 신뢰 수준
t99
t99$p.value
t90 <- t.test(tips$total_bill,conf.level = 0.90)
t90$conf.int
t90$estimate
t90$p
t90$p.value
mean(tips$total_bill)
t99 <- t.test(tips$total_bill,mu=19.78594,conf.level = 0.99)  # 신뢰 수준
t99$conf.int
t99
t99 <- t.test(tips$total_bill, mu = 20.28123,conf.level = 0.99)  # 신뢰 수준
t99
OneSample
OneSample <- c(15.5,11.21,12.67,8.87,12.15,9.88,2.06,14.5,0,4.97)
OneSample
plot(OneSample)
plot(OneSample, method="l")
?plot
plot(OneSample,l)
plot(OneSample,"l")
plot(OneSample,type="l")
shapiro.test(OneSample) # 정규분포를 따르는지 확인.
?shapiro.test
t.test(OneSample,mu=8.1)
t.test(OneSample,mu=8.1,alternative = "greater")
t.test(OneSample,mu=8.1,alternative = "less")
t.test(OneSample,mu=8.1,conf.level = 0.99)
DF <- read.csv("movie_MBA2.csv",stringsAsFactors = F)
DF
DF15 <- DF[DF$rating=="15세이상관람가",]
DF15
par(las=1,mfcol=c(1,1))
hist(DF$total_seen,20)
total_seen
DF$total_seen
str(DF)
DFRe <- t.test(DF15$total_seen,conf.level = 0.95,mu=1500000,alternative = "greater")
DFRe
DFRe2 <- t.test(DF15$total_seen,conf.level = 0.95,mu=1500000)
DFRe2$conf.int # 150만을 포함하고 있지 않다. 기각한다.
DFRe2
rm(list=ls())
DT <- read.csv("dental.csv",stringsAsFactors = F)
par(mfcol=c(1,2))
boxplot(resp~treatment,data=DT)
boxplot(log(resp)~treatment,data=DT)
var.test(log(resp)~treatment, data=DT)  # alternative : true ratio of variances is not equal to 1
source('F:/#BigdataMBA/#1. R/0703/chapter2.R', encoding = 'UTF-8', echo=TRUE)
str(DT)
DT <- read.csv("dental.csv",stringsAsFactors = F)
str(DT)
var.test(log(resp)~treatment, data=DT)  # alternative : true ratio of variances is not equal to 1
t.test(log(resp)~treatment,var.equal=T,data=DT)
MV <- read.csv("movie_MBA2.csv",stringsAsFactors = F)
MV1215 <- MV[MV$rating=="15세이상관람가"|MV$rating=="12세이상관람가",]
unique(MV1215$rating)
MV1215$rating <- factor(MV1215$rating,labels=c("12세이상관람가","15세이상관람가")) #rating에 원래 다른 levels가 존재한걸 없애준다.
boxplot(total_seen~rating,MV1215)
boxplot(log(total_seen)~rating,MV1215)
var.test(total_seen~rating,MV1215)
var.test(total_seen~rating,MV1215)
var.test(log(total_seen)~rating,MV1215)
t.test(total_seen~rating,MV1215,alternative="less")  #12세 - 15세가 0보다 작아야되므로 less를 적용.
Earning <- read.csv("Earnings.csv",stringsAsFactors = F)
head(Earning)
str(Earning)
with(Earning,boxplot(Actual - Predicted))
with(Earning,t.test(Actual - Predicted,alternative = "greater"))
par(mfcol=c(1,1))
with(Earning,boxplot(Actual - Predicted))
boxplot(Earning$Actual - Earning$Predicted)
t.test(Earning$Actual - Earning$Predicted)
prop.test(67,120)
prop.test(67,120,p = 0.7)   #p-value : 0.001013 < 0.05 기각.
prop.test(c(60,120),c(150,250),alter="less")  # c(x1,x2) c(n1,n2)
DE <- matrix(c(33,28,5,67,122,45),3,2)
colnames(DE) <- c("있다","없다")
rownames(DE) <- c("저소득","중간층","고소득")
DE
chisq.test(DE)
TP <- matrix(c(48,16,20,40),2,2,byrow = T)
TP <- addmargins(TP)
class(TP)
colnames(TP) <- c("0","1","합")
rownames(TP) <- c("Treat","Placebo","Test")
NY <- read.csv("NYReform.csv",stringsAsFactors = F)   # 찬성 : 1, 반대 : 2
tab1 <- xtabs(~Pay.Cut + Party, data=NY)
chisq.test(tab1)  #  p-value = 0.006135 < 0.05 기각. 독립이 아니다.
prop.test(tab2[1,1],tab2[3,1])   # equal  21,36 에서 p=0.5  p-value = 0.4047 귀무 참. 0.5의 유의수준에 있다.
tab2 <- xtabs(~Lobbyists + Party, NY)
chisq.test(tab2)   # p-value = 0.1557 > 0.05 크게 정당별로 관계가 없다. 독립이다.
mosaicplot(tab2)
mosaicplot(t(tab2))
tab2 <- addmargins(tab2,1)
prop.test(tab2[1,1],tab2[3,1])   # equal  21,36 에서 p=0.5  p-value = 0.4047 귀무 참. 0.5의 유의수준에 있다.
tab3 <- xtabs(~Term.Limits+Party,NY)
tab3 <- addmargins(tab3,1)
chisq.test(tab3)  # 기각 X 독립 p-value = 0.07763
mosaicplot(t(tab3))
