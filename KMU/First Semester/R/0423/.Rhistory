x <- list(1:3,"a",c(TRUE,FALSE,TRUE),c(2.3,5.9))
str(x)
x
x1 <- data.frame(1:3,2:4)
x1
x[[5]] <- x1
x
mem_view <- function(x) capture.output(.Internal(inspect(x)))
x <- list(1:3, "a", c(TRUE, FALSE, TRUE), c(2.3, 5.9))
str(x)
mem_view(x)
inspect(x)
inspect(x)
.Internal(x)
.Internal(inspect(x))
intVec <- 1:4
mem_view(c)
charVec <- LETTERS[1:4]
mem_view(charVec)
charVec
intVec
mem_view
mem_view
numVec
numVec <- c(1.1, 2.3579, 3.33333, 4.4321)
mem_view(numVec)
numVec
str(numVec)
str(intVec)
iris_setosa = iris[iris$Species == 'setosa',]
iris_versicolor = iris[iris$Species == 'versicolor',]
iris_virginica = iris[iris$Species == 'virginica',]
result_1 = lapply(iris_setosa[,-5],mean)
result_1
str(result_1)
result_1 = unlist(result_1)   #produce a vector which contains all the atomic components which occur in x.
str(result_1)
result_1
result_1 = as.matrix(result_1)
result_1
result_1 = data.frame(result_1)
result_1
colnames(result_1) = c("Mean")
str(result_1)
result_1
result_2 = as.data.frame(matrix(unlist(lapply(iris[,1:4],mean)),ncol=4,byrow=TRUE))
result_2
colnames(result_2) = colnames(iris_setosa[,-5])
result_2
y <- list(int=1:3, char= "a", bool=c(TRUE, FALSE, TRUE), num=c(2.3, 5.9))
y
y <- list(int=1:3, char= "a", bool=c(TRUE, FALSE, TRUE), num=c(2.3, 5.9))
y
y[[2]]
y[[4]]
y[["num"]]
y$num
y$int
y$bool
y[5] <- "b"
y
y[[1:5]]
y[1:5]
y <- y[1:4]
y
y[[5]] <- "b"
y
y <- y[1:4]
y[5] <- "b"
y
y["added"] <- 5
y
y[1]
y[[1]
]
y[[1]]
y[1]
y[1]
y[[1]]
y[[6]] <- c(1,2,3)
y
y[7] <- c(1,2,3)
y[7] <- "2"
y
y[[8]] <- c(1,2,3)
y
y[[8]]
y[8
y[8]
x
x <- list(1:3,"a",c(TRUE,FALSE,TRUE),c(2.3,5.9))
str(x)
x    # 어떠한 타입을 넣을 수 있는 타입. 리스트 안에 리스트도 가능하다.
x1 <- data.frame(1:3,2:4)
x1
x[[5]] <- x1
x
x[[5]]
x[5]
x[5][2] <- c(1,2,3)
x[[5][2]] <- c(1,2,3)
x[[5]][2] <- c(1,2,3)
x
x[5]
x[[5]][[2]] <- c(1,2,3)
x[5]
row <- 1000
column <- 1000
myMatrix <- matrix(nrow=row, ncol=column)
dim(myMatrix)
head(myMatrix)
system.time(
for (column in 1:column) {
for (row in 1:row) {
myMatrix[row,column] <- row*column
}
}
)
start.time <- Sys.time()
N <- 12
matrixdata <- matrix(rep(0,81), ncol=9)
for (i in 1:N) {
for(j in 1:N) {
matrixdata[i,j] <- i*j  #error. R is lazy.
}
}
Sys.time() - start.time
matrixdata
start.time <- Sys.time()
N <- 12
matrixdata <- matrix(rep(0,81), ncol=9)
for (i in 1:N) {
for(j in 1:N) {
matrixdata[i,j] <- i*j  #error. R is lazy.
}
}
Sys.time() - start.time
matrixdata
start.time <- Sys.time()
N <- 12
matrixdata <- matrix(rep(0,81), ncol=9)
for (i in 1:N) {
for(j in 1:N) {
matrixdata[i,j] <- i*j  #error. R is lazy.
}
}
Sys.time() - start.time
matrixdata
matrixdata
start.time <- Sys.time()
N <- 12
matrixdata <- matrix(rep(0,81), ncol=9)
for (i in 1:N) {
for(j in 1:N) {
print(i)
print(j)
matrixdata[i,j] <- i*j  #error. R is lazy.
}
}
Sys.time() - start.time
matrixdata
start.time <- Sys.time()
N <- 12
matrixdata <- matrix(rep(0,81), ncol=9)
for (i in 1:N) {
for(j in 1:N) {
matrixdata[i,j] <- i*j  #error. R is lazy.
}
}
Sys.time() - start.time
matrixdata
start.time <- Sys.time()
N <- 12
matrixdata <- matrix(rep(0,81), ncol=9)
for (i in 1:N) {
print(i)
for(j in 1:N) {
print(j)
matrixdata[i,j] <- i*j  #error. R is lazy.
}
}
Sys.time() - start.time
matrixdata
start.time <- Sys.time()
N <- 9
matrixdata <- matrix(rep(0,81), ncol=9)
for (i in 1:N) {
print(i)
for(j in 1:N) {
print(j)
matrixdata[i,j] <- i*j  #error. R is lazy.
}
}
Sys.time() - start.time
matrixdata
start.time <- Sys.time()
N <- 12
dfdata <- data.frame(matrix(rep(0,81), ncol=9))
for (i in 1:N) {
for(j in 1:N) {
dfdata[i,j] <- i*j
}
}
Sys.time() - start.time
dfdata
?datasets
help("datasets")
help("datasets")
library(help = "datasets")
unique(iris$Species)
fac0 <- c("Male","Female","Female","Male")
fac1 <- factor(c("Male","Female","Female","Male"))
fac0
fac1
fac2 <- factor(c(1,2,1,1,2,3))
levels(fac1)
levels(fac2)
data(mtcars)
mtcars
data(mtcars)
aggregate(mpg~cyl,data = mtcars,mean)
rownames(mtcars)
?split
which.min(mtcars$mpg)
rownames(which.min(mtcars$mpg))
rownames(mtcars[which.min(mtcars$mpg)])
rownames(mtcars[which.min(mtcars$mpg)])
rownames(mtcars)[which.min(mtcars$mpg)]
str(mtcars)
aggregate(mpg+wt~cyl,data=mtcars,sum)
aggregate(mpg + wt~cyl,data=mtcars,sum)
aggregate(mpg~cyl,data=mtcars,sum)
aggregate(mpg + wt ~cyl,data=mtcars, mean)
summaryBy(Sepal.Width + Sepal.Length ~ Species,data=iris,FUN = mean)
library("doBy")
head(iris)
mean(iris$Sepal.Width); mean(iris$Sepal.Length)
summaryBy(Sepal.Width + Sepal.Length ~ Species,data=iris,FUN = mean)
aggregate(mpg ~ cyl,wt,data=mtcars, mean)
aggregate(mpg ~ cyl + wt,data=mtcars, mean)
orderby(aggregate(mpg ~ cyl + wt,data=mtcars, mean))
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
barplot(table(fac3))
ordered=TRUE)
fac4 <- factor(fac3, levels=c("low","middle","high"), ordered=TRUE)
barplot(table(fac4))
barplot(table(fac3))
fac5 <- factor(sample(0:1, 20, replace=TRUE))
fac5
fac6 <- factor(fac5, labels=c("abs","pre"))
fac5
fac6
levels(fac3)
fac4 <- factor(fac3, levels=levels(fac3), ordered=TRUE)
barplot(table(fac4))
barplot(table(fac4))
fac4
levels(fac3)
fac4 <- factor(fac3, levels=c("low","middle","high"), ordered=TRUE)
barplot(table(fac4))
fac4
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
fac4 <- factor(fac3, levels=c("low","middle","high"), ordered=FALSE)
table(fac4)
fac4 <- factor(fac3, levels=c("low","middle","high"), ordered=TRUE)
table(fac4)
barplot(table(fac4))
?factor
fac4 <- factor(fac3, levels=c("low","middle","high"), ordered=TRUE)
table(fac4)
barplot(table(fac4))
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
barplot(table(fac3))
levels(fac3)
fac4 <- factor(fac3, levels=c("low","middle","high"), ordered=TRUE)
table(fac4)
barplot(table(fac4))
fac4 <- factor(fac3, levels=c("low","middle","high"), ordered=FALSE)
table(fac4)
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
fac4 <- factor(fac3, levels=c("low","middle","high"), ordered=FALSE)
table(fac4)
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
fac4 <- factor(fac3, levels=c("low","middle","high"), ordered=TRUE)
table(fac4)
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
fac4 <- factor(fac3, levels=c("low","middle","high"), ordered=FALSE)
table(fac4)
fac4 <- factor(fac3, levels=levels(fac3), ordered=TRUE)
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
barplot(table(fac3))
levels(fac3)
fac10 <- factor(fac3, levels=levels(fac3), ordered=TRUE)
table(fac10)
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
fac10 <- factor(fac3, levels=levels(fac3), ordered=FALSE)
table(fac10)
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
levels(fac3)
fac3 <- factor(sample(c("12", "23", "34"), 20, replace=TRUE))
table(fac3)
barplot(table(fac3))
levels(fac3)
fac10 <- factor(fac3, levels=levels(fac3), ordered=TRUE)
table(fac10)
barplot(fac10)
barplot(table(fac10))
fac3 <- factor(sample(c("high", "low", "middle"), 20, replace=TRUE))
table(fac3)
barplot(table(fac3))
levels(fac3)
fac3 <- factor(sample(c("high", "middle", "low"), 20, replace=TRUE))
table(fac3)
barplot(table(fac3))
fac4 <- factor(fac3, levels=c("low","middle","high"), ordered=TRUE)
table(fac4)
barplot(table(fac4))
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
apply(m, 1, mean)
apply(m, 2, mean)
subset(x = iris, subset = Species == "setosa" & Sepal.Length > 5.0)
subset(x = iris, Species == "setosa" & Sepal.Length > 5.0,
select = c(Sepal.Length,Sepal.Width))
tapply(iris$Petal.Length, iris$Species, mean)
?tapply
mean(x = c(1,2,3)) #()안의 = 를 사용하면 ()밖에서는 x에 할당이 안되기 때문에 ERROR
x
mean(x <- c(1,2,3)) # ()안의 <- 를 사용하면 ()밖에서도 x에 할당이 안되기 때문에 실행가능
x
### 3) 스칼라(실질적으로는 Vector)
a = 90
b = 85
c = 80
d = 85
e = 70
f = NA
g = NULL
tmp = c(a,b,c,d,e,f,g)
(tmp_1 = 1:
sd(tmp_11)
quantile(tmp_11)
quantile(tmp_11,probs = seq(from = 0,to = 1,by = 0.05))
IQR(tmp_11)
# [단축키]
# CTRL + ENTER : 스크립트 실행
# CTRL + 1 / 2 : 스크립트와 콘솔창 이동
# ALT + - : <-
### 1) 변수이름규칙
# a / b / a1 / b2 / .a / .a1 <--- GOOD
##### CH2. DATA TYPE ####
# 2a / .2 / a-b              <--- BAD
### 2)할당연산자
# <- / =
mean(x = c(1,2,3)) #()안의 = 를 사용하면 ()밖에서는 x에 할당이 안되기 때문에 ERROR
x
mean(x <- c(1,2,3)) # ()안의 <- 를 사용하면 ()밖에서도 x에 할당이 안되기 때문에 실행가능
x
### 3) 스칼라(실질적으로는 Vector)
a = 90
b = 85
c = 80
e = 70
f = NA
g = NULL
(tmp_1 = 1:
sd(tmp_11)
tmp = c(a,b,c,d,e,f,g)
d = 85
quantile(tmp_11)
quantile(tmp_11,probs = seq(from = 0,to = 1,by = 0.05))
IQR(tmp_11)
tmp = c(a,b,c,d,e,f,g)
is.null(tmp)
is.null(g)
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
m
apply(m, 1:2, function(x) x/2) #annonymous function
apply(m, 2, function(x) x/2) #annonymous function
apply(m, 1, function(x) x/2) #annonymous function
?apply
apply(m, 1:2, function(x) x/2) #annonymous function
apply(m, 2, function(x) x/2) #annonymous function
m <- matrix(c(1:10, 11:20), nrow = 10, ncol = 2)
apply(m, 1, mean)
apply(m, 2, mean)
apply(m, 1:2, function(x) x/2) #annonymous function
m
apply(m, 1:2, function(x) x/2) #annonymous function
apply(m, 1, function(x) x/2) #annonymous function    #ROW를 기준으로  ?apply
apply(m, 2, function(x) x/2) #annonymous function
l <- list(a = 1:10, b = 11:20)
l
lapply(l, mean)
lapply(l, sum)
l <- list(a = 1:10, b = 11:20)
l.mean <- sapply(l, mean)
l
l.mean
class(l.mean)
l.mean[['a']]
data(iris)
head(iris)
tapply(iris$Petal.Length, iris$Species, mean)
tapply(iris$Petal.Length, iris$Species, sum)
table(iris)
table(iris$Species)
?table
a <- letters[1:3]
a <- letters[1:3]
a
table(a, sample(a))                    # dnn is c("a", "")
sample(a)
sample(a)
sample(a)
sample(a)
sample(a)
a
table(a, sample(a))                    # dnn is c("a", "")
b <- sample(a)
b
table(a, b)                    # dnn is c("a", "")
a
b
table(a, b, deparse.level = 0) # dnn is c("", "")
table(a, b, deparse.level = 2) # dnn is c("a", "sample(a)")
table(a, sample(a), deparse.level = 0) # dnn is c("", "")
table(a, sample(a), deparse.level = 2) # dnn is c("a", "sample(a)")
iris_setosa = iris[iris$Species == 'setosa',]
iris_versicolor = iris[iris$Species == 'versicolor',]
iris_virginica = iris[iris$Species == 'virginica',]
tapply(iris$Sepal.Length,iris$Species,mean)   # (1,2,3)   1번을 가지고 2번 별로 3번을 한다.
tapply(iris$Sepal.Length,iris$Species == 'setosa',mean)
tapply(iris$Sepal.Length,iris$Species != 'setosa',mean)
