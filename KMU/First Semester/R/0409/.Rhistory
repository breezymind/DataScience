is.data.frame(tmp_9)
tmp_9[,1]; tmp_9[1:2,]; tmp_9$C1; tmp_9[,-2]
# 유틸리티 함수
tmp_10 = data.frame(C1 = 1:100, C2 = rep(1:2,50))
head(tmp_10)
tail(tmp_10)
View(tmp_10)
is.matrix(tmp_7)
tmp_7 = as.data.frame(tmp_7)
is.data.frame(tmp_7)
is.numeric(tmp_9$C2)
as.character(tmp_9$C2)
tmp_6
str(tmp_6);str(tmp_7)
tmp_6
str(tmp_6)
str(tmp_7)
tmp_3 = c(1,3,5)
tmp_4 = c(2,4,6)
tmp_5 = c("2","4","6")
tmp_6 = c(tmp_3,tmp_4); tmp_7 = c(tmp_3,tmp_5)
str(tmp_6);str(tmp_7)
tmp_6[1]; tmp_6[1:3]
tmp_3[-2]; tmp_6[-2:-3]
is.vector(tmp_3)
tmp_6[-2:-3]
is.vector(tmp_3)
tmp_7 = matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow = TRUE)
tmp_8 = matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow = FALSE)
tmp_7
tmp_8
t(tmp_7)
rownames(tmp_7) = c("r1","r2","r3")
colnames(tmp_7) = c("c1","c2","c3")
tmp_7
dimnames(tmp_8) = list(c("r1","r2","r3"),c("c1","c2","c3"))
tmp_8
list(c("r1","r2","r3"),c("c1","c2","c3"))
nrow(tmp_8)
ncol(tmp_8)
dim(tmp_8)
is.matrix(tmp_7)
tmp_8[1,2]
tmp_8[1:2,]
tmp_8
tmp_8[,-3]
tmp_7 + tmp_8
tmp_7 - tmp_8
tmp_7 * tmp_8
tmp_7 %*% tmp_8  # 행렬의 곱을 하려면 %*%
tmp_9 = data.frame(c(1,3,5,7,9),c(2,4,6,8,10))
tmp_9
colnames(tmp_9) = c("C1","C2")
tmp_9
tmp_9$C3 = c("A","B","C","D","E")
tmp_9
tmp_9$C4 = c("A","B","C","D")
str(tmp_9)
is.data.frame(tmp_9)
tmp_9$C4 = c("A","B","C","D","")
tmp_9
tmp_9[,1]; tmp_9[1:2,]; tmp_9$C1; tmp_9[,-2]
tmp_9[,1]
tmp_9
tmp_9[1:2,];
tmp_9$C1;
tmp_9[,-2]
tmp_10 = data.frame(C1 = 1:100, C2 = rep(1:2,50))
tmp_10
head(tmp_10)
tail(tmp_10)
View(tmp_10)
head(tmp_10,10)
setwd("d://빅데이터MBA/R프로그래밍/R/0409/)
setwd("d://빅데이터MBA/R프로그래밍/R/0409/")
setwd("d://빅데이터MBA/R프로그래밍/R/0409/")
sim.result <- c(30830.12,
29418.27,
30240.43,
28773.92,
28724.14,
31721.73,
31654.94,
28680.61,
32158.86,
30965.61,
40436.46,
27968.15,
31720.18,
29284.54,
33646.88,
31613.98,
31929.15,
27796.76,
32059.00,
32046.81,
32232.00,
31056.00,
35187.15,
29427.88,
28923.28,
31417.80,
33646.88)
length(sim.result)
hist(sim.result)
mean(sim.result)
sd(sim.result)
set.seed(30)
x <- sample(1:10, 100, replace=T)
x
oddcount(x)
oddcount (x)
oddcount <- function(x)  {
k <- 0  # assign 0 to k
for (n in x)  {
if (n %% 2 == 1) k <- k+1  # %% is the modulo operator
}
return(k)
}
oddcount (x)
install.packages("modeest")
??modest
library(modeest)
x <- sample(1:10, 100, replace=T)
x
mfv(x)
hist(x)
table(x)
1:5-1
1:5-1:2
1:5-1:2
1/:5-rep()
1:5-1:2
1:5-1:2
1:5-1:2
1:5-rep(1,5)
abs(-5)
sqrt(4)
3^1/2
3^(1/2)
x<-seq(-5,5,0.1)
x
y<-exp(x)
y
plot(x,y)
(start.time <- Sys.time())
output <- NULL
for (j in 1:100) {
for (i in 1:100000) {
dummy_str <- str_vector[sample(1:8,8,replace=F)]
if(sum( dummy_str == str_vector[c(1,6,4,2,7,5,8,3)]) == 8) {
print(j)
print(i)
output <- c(output, i)
break
}
}
}
str_vector <- c("hello,", "me","?", "it", "looking", "is", "you", "for")
str_vector
(start.time <- Sys.time())
output <- NULL
for (j in 1:100) {
for (i in 1:100000) {
dummy_str <- str_vector[sample(1:8,8,replace=F)]
if(sum( dummy_str == str_vector[c(1,6,4,2,7,5,8,3)]) == 8) {
print(j)
print(i)
output <- c(output, i)
break
}
}
}
i
x <- seq(-20,20,0.1)
length(x)
sigmoid <- exp(x)/(1+exp(x))
plot(x, sigmoid)
for (i in 1:100000) {
set.seed(i)
dummy_str <- str_vector[sample(1:8,8,replace=F)]
if(sum( dummy_str == str_vector[c(1,6,4,2,7,5,8,3)]) == 8) {
print(i)
print(dummy_str)
}
}
Sys.time() - start.time
?sqrt
sigmoid2 <- exp(9^(1/5))(1 + exp(9^(1/5)))
sigmoid2 <- exp(9^(1/5))/(1 + exp(9^(1/5)))
x <- seq(-20,20,0.1)
length(x)
plot(x, sigmoid2)
plot(sigmoid2)
sigmoid2
a <- 0
(start.time <- Sys.time())
for (i in 1:100000) {
set.seed(i)
dummy_str <- str_vector[sample(1:8,8,replace=F)]
if(sum( dummy_str == str_vector[c(1,6,4,2,7,5,8,3)]) == 8) {
a <- a + 1
print(i)
print(dummy_str)
}
}
print(a)
View(iris)
dir()
dir.data <- dir()
dir.data
dir.data
?right
?right()
ncahr(dir.data)
dir()
dir.data <- dir()
dir.data
ncahr(dir.data)
?ncahr
nchar(dir.data)
nchar(dir.data)
dir.data
substr(dir.data,nchar(dir.data)-1,nchar(dir.data))
substr(dir.data,nchar(dir.data),nchar(dir.data))
tmp <- substr(dir.data,nchar(dir.data),nchar(dir.data))
?ifelse
tmp <- ifelse(substr(dir.data,nchar(dir.data),nchar(dir.data))="R","알이다","알이아니다")
tmp <- ifelse(substr(dir.data,nchar(dir.data),nchar(dir.data))=="R","알이다","알이아니다")
tmp
head(iris)
help("substr")
a <- "test"
substr(a,1,2)
nchar(a)
tmp
tmp <- substr(dir.data,nchar(dir.data),nchar(dir.data))
tmp
endIndex <- nchar(dir.data)
extention <- substr(dir.data,endIndex,end$)
extention <- substr(dir.data,endIndex,end$
help(end$)
extention <- substr(dir.data,endIndex,end$)
endIndex <- nchar(dir.data)
endIndex
extention <- substr(dir.data,endIndex,end)
str_vector <- c("hello,", "me","?", "it", "looking", "is", "you", "for")
str_vector
factorial(8)
str_vector2 <- str_vector[c(1,6,4,2,7,5,8,3)]
str_vector2
paste(str_vector,str_vector2)
paste(str_vector,str_vector2,sep = "")
paste(str_vector,collapse = "")
paste(str_vector,collapse = ".")
tmp <- matrix(1:12,3)
tmp
paste(tmp,collapse = "")
?split
install.packages(c("RCurl", "twitteR", "ROAuth"))
library(RCurl)
library(twitteR)
library(ROAuth)
reqURL <- "https://api.twitter.com/oauth/request_token"
accessURL <- "https://api.twitter.com/oauth/access_token"
authURL <- "https://api.twitter.com/oauth/authorize"
consumerKey <- "  "
consumerSecret <- ""
options(RCurlOptions = list(cainfo = system.file("CurlSSL", "cacert.pem", package = "RCurl")))
download.file(url="http://curl.haxx.se/ca/cacert.pem", destfile="cacert.pem")
setup_twitter_oauth("J6Y4NEAl5mubjrHQ28kFbWAsw", "qbnzZOVPcQjAU0MbKbFybEw5jtcrZTlhs1djEi0Xaix9Ev1gxH", "896621426-KC4s40IVAlYWhrL61N6RGkxlUMfkirUjGFdvZaju", "JQ9ZT8j2VY2wKZiehy2IKU5toSkcnfhHevpx0x0Hq6Jn0")
apple.tweets <- searchTwitter("@apple", n=1000)
samsung.tweets <- searchTwitter("@samsung", n=500)
head(apple.tweets)
apple.tweets <- apple.tweet
apple.tweet <- apple.tweets
samsung.tweet <- samsung.tweets
length(apple.tweets)
class(apple.tweets)
apple.tweets[1:5]
tweet <- apple.tweets[[1]]
tweet
tweet$getScreenName()
tweet$getText()
library(plyr)
install.packages(plyr)
install.packages("plyr")
library(plyr)
apple.text <- laply(apple.tweets,function(t)t$getText())
head(apple.text,3)
samsung.text <- laply(samsung.tweets,function(s)s$getText())
head(apple.text2,3)
apple.text2 <-laply(apple.tweets,function(t)t$getScreenName())
head(apple.text2,3)
setwd("d:\\RStudy/SDS/Data/3day/")
setwd("d:\\RStudy/SDS/Data/3day/")
pos.word = scan("positive-words.txt", what = "character", comment.char = ";")
neg.word = scan("negative-words.txt", what = "character", comment.char = ";")
View(pos.worrd)
View(pos.word)
View(pos.word)
pos.word
pos.words<-c(pos.word,"upgrade")
neg.words<-c(neg.word,"wait","waiting")
tail(neg.words)
tail(pos.words)
# 긍정/부정에 대한 score를 부여하는 루틴의 함수
score.sentiment = function(sentences, pos.words, neg.words, .progress='none')
{
require(plyr)
require(stringr)
# we got a vector of sentences. plyr will handle a list or a vector as an "l" for us
# we want a simple array ("a") of scores back, so we use
# "l" + "a" + "ply" = "laply":
scores = laply(sentences, function(sentence, pos.words, neg.words) {
# clean up sentences with R's regex-driven global substitute, gsub():
sentence = gsub('[[:punct:]]', '', sentence)
sentence = gsub('[[:cntrl:]]', '', sentence)
sentence = gsub('\\d+', '', sentence)
# and convert to lower case:
sentence = tolower(sentence)
# split into words. str_split is in the stringr package
word.list = str_split(sentence, '\\s+')
# sometimes a list() is one level of hierarchy too much
words = unlist(word.list)
# compare our words to the dictionaries of positive & negative terms
pos.matches = match(words, pos.words)
neg.matches = match(words, neg.words)
# match() returns the position of the matched term or NA
# we just want a TRUE/FALSE:
pos.matches = !is.na(pos.matches)
neg.matches = !is.na(neg.matches)
# and conveniently enough, TRUE/FALSE will be treated as 1/0 by sum():
score = sum(pos.matches) - sum(neg.matches)
return(score)
}, pos.words, neg.words, .progress=.progress )
scores.df = data.frame(score=scores, text=sentences)
return(scores.df)
}
apple.text <-apple.text[!Encoding(apple.text)=="UTF-8"]
apple.scores=score.sentiment(apple.text,pos.words,neg.words,.progress="text")
samsung.text <- samsung.text[!Encoding(samsung.text)=="UTF-8"]
samsung.scores=score.sentiment(samsung.text,pos.words,neg.words,.progress = "text")
hist(apple.scores$score)
hist(samsung.scores$score)
hist(apple.scores$score)
x <-1:10
which(x > 5)
which(x[x>5])
x[x>5]
x > 5
x1 <- c(1,NA,2,NA,3)
which(is.na(x1))
which(!is.na(x1))[3]
?which
set.seed(10)
x2<- sample(1:50,7,replace = F)  #중복방지
which(x2>20)
x2
y <- which(x2>20)
x2[y]
y1 <- which.max(x2>20)
x2[y1]
which(!is.na(x1))[3]  # is.na false data choose index 3
myMatrix <- matrix(1:20,4,5)
myMatrix
myMatrix <- matrix(1:20,4,5,byrow = T)
myMatrix
myMatrix[1,]
myMatrix[,5]
myMatrix <- matrix(1:20,4,5)
myMatrix[2,3]
myMatrix[2:3,3:4]
myMatrix2 <- matrix(1:19,4,5)
myMatrix2
str(myMatrix[1,])
str(myMatrix[2:3,3:4])
str(myMatrix)
is.matrix(myMatrix[2:3,3:4])
age <- 10:20
payment <-  300:310
cbind(age,payment)
rbind(age,payment)
rowsum(cbind(age,payment))
rowsum(cbind(age,payment)$age)
a <- cbind(age,payment)
a
rowsum(a)
help("rowsum")
rowsum(a,ncol = 1)
rowSums(a)
source('D:/RStudy/20160416/0416.R', encoding = 'UTF-8', echo=TRUE)
colSums(a)
install.packages("jpeg")
setwd("d://RStudy/20160416/")
library(jpeg)
mtrushBMP <- readJPEG("mount-rushmore-national-memorial.jpg")
str(mtrushBMP)
mtrushBMP <- readJPEG("mount-rushmore-national-memorial.jpg")
str(mtrushBMP)
dim(mtrushBMP)
range(mtrushBMP[1, ,1])
max(mtrushBMP)
View(mtrushBMP)
mean(x = c(1,2,3));x
mean(x <- c(1,2,3));x
mean(x = c(1,2,3));x
mean(x <- c(1,2,3));x
a = 90
b = 85
c = 80
d = 85
e = 70
f = NA
g = NULL
f
tmp = c(a,b,c,d,e,f,g)
(tmp_1 = 1:10)  # 실행과 동시에 결과도 나오게 하는것 () 묶에서 할당을 하게 된다면.
seq(from = 1,to = 10,by = 2)
tmp
rep(x = 1:2,times=3)
rep(x = 1:2,times=3)
seq(from = 1,to = 10,by = 2)
sum(tmp)
sum(tmp,na.rm=TRUE)
tmp
help("NULL")
is.na(tmp)
is.null(tmp)
is.null(g)
is_even = NULL
a
if(a %% 2 == 0){   # %%나머지값만 보는 것.
is_even = TRUE
}else if(a %% 2 == 1){   # %/%
is_even = FALSE
}else{is_even = NA
}
is_even
a %% 2 == 0 & a %% 4 == 0
a %% 4
a %% 2
a %% 2 == 0 && a %% 4 == 0
tmp_3 = c(1,3,5)
tmp_4 = c(2,4,6)
tmp_5 = c("2","4","6")
tmp_6 = c(tmp_3,tmp_4); tmp_7 = c(tmp_3,tmp_5)
str(tmp_6);str(tmp_7)
tmp_6[1]; tmp_6[1:3]
tmp_3[-2]; tmp_6[-2:-3]    # -2 : 2번만 빼고    -2:-3   2~3번째 값을 빼고 출력.
length(tmp_3); NROW(tmp_6)
tmp_7 = matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow = TRUE)
tmp_8 = matrix(c(1,2,3,4,5,6,7,8,9),nrow=3,ncol=3,byrow = FALSE)
tmp_7
tmp_8
t(tmp_8)
nrow(tmp_8)
ncol(tmp_8)
dim(tmp_8)
is.matrix(tmp_7)
tmp_8[1,2]; tmp_8[1:2,]; tmp_8[,-3]
while(i<=10){
print(i)
i = i + 1
}
i=1
while(i<=10){
print(i)
i = i + 1
}
tmp_10 = c(1,3,5,7,9)
tmp_11 = c(2,4,6,8,10)
tmp_10 + tmp_11
sum(tmp_10,tmp_11)
mean(tmp_10)
median(tmp_11)
sd(tmp_11)
quantile(tmp_11)
quantile(tmp_11,probs = seq(from = 0,to = 1,by = 0.05))
IQR(tmp_11)
?IQR
quantile(tmp_11)
quantile(tmp_11,probs = seq(from = 0,to = 1,by = 0.05))
IQR(tmp_11)
LENGTH = function(x){
A =  sum(x)
B =  mean(x)
C =  median(x)
D =  sd(x)
E = summary(x)
cat("\n", "합계:",A)
cat("\n", "평균:",B)
cat("\n", "중위수:",C)
cat("\n", "표준편차:",D)
cat("\n", "SUMMARY:",E)
}
LENGTH(tmp_10)
head(iris)
tail(iris)
table(iris$Species)
aggregate(Sepal.Length ~ Species,data=iris,FUN=summary)
aggregate(Sepal.Length ~ Species,data=iris,FUN=sum)
lmout = lm(Sepal.Length ~ Species,data=iris)
summary(lmout)
?lm
lmout
lmout
summary(lmout)
ls()
rm()
rm(ls())
rm(ls(..))
