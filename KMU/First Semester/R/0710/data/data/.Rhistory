orderBy(~ Sepal.Length + Sepal.Width, data=iris_setosa)
sample(1:10,replace = T)
iris_setosa[sample(nrow(iris_setosa),nrow(iris_setosa)),]
sampleBy(~ Species, frac = 0.1, data=iris_setosa)
result_3 = split(x = iris$Sepal.Length,f = iris$Species)
result_3
str(result_3)
mean(result_3$setosa)
mean(result_3[[1]])
lapply(result_3,mean)
subset(x = iris, subset = Species == "setosa" & Sepal.Length > 5.0)    #교집합의 의미로 and(&) 추가
subset(x = iris, Species == "setosa" & Sepal.Length > 5.0,
select = c(Sepal.Length,Sepal.Width))
subset() # Tab활용
subset(x = iris, Species == "setosa" & Sepal.Length > 5.0,
select = c(Sepal.Length,Sepal.Width))
subset() # Tab활용
x = data.frame(name=c("a","b","c"),math=c(1,2,3))
y = data.frame(name=c("c","b","a"),english =c(4,5,6))
z = data.frame(name=c("b","d","a"),statistic =c(7,8,9))
x;y;z
merge(x = x,y = y,by = c("name"))
merge(x = x,y = z,by = c("name"))
merge(x = x,y = z,by = c("name"),all = T)
aggregate(Sepal.Length ~ Species,data=iris,FUN=mean)
aggregate(Sepal.Length ~ Species,data=iris,FUN=max)
aggregate(Sepal.Length ~ Species,data=iris,FUN=summary)
iris$Type = NA
iris[1:75,6] = 1
iris[76:nrow(iris),6] = 2
aggregate(Sepal.Length ~ Species + Type,data=iris,FUN=summary)
iris
mapply(FUN=mean,iris[,1:4])
tapply(iris,sum)
sapply(iris,sum)
apply(iris, margin=2, FUN=sum)
apply(iris, 2, FUN=sum)
apply(iris, 1, FUN=sum)
apply(iris[,1:4], 1, FUN=sum)
apply(iris[,1:4], 2, FUN=sum)
lapply(iris[,1:4], sum)
sapply(iris[,1:4],sum)
iris
head(iris)
iris_data <- iris[,1:4]
iris_data
head(iris_data)
print(i)
0,1]){
print(i)
}
for (i in iris[1:10,1]){
print(i)
}
head(iris,10)
sum(iris[,1])
apply(iris[,1], 2, FUN=sum)
apply(iris[,1:4], 2, FUN=sum)
for (i in iris[,-5]){
sum_Sepal.Length <- sum(iris[,1])
sum_Sepal.Width <- sum(iris[,2])
sum_Petal.Length <- sum(iris[,3])
sum_Petal.Width <- sum(iris[,4])
print(sum_Sepal.Length)
print(sum_Sepal.Width)
print(sum_Petal.Length)
print(sum_Petal.Width)
}
for (i in iris[,-5]){
sum_Sepal.Length <- sum(iris[,1])
sum_Sepal.Width <- sum(iris[,2])
sum_Petal.Length <- sum(iris[,3])
sum_Petal.Width <- sum(iris[,4])
}
for (i in iris){
sum_Sepal.Length <- sum(iris[,1])
sum_Sepal.Width <- sum(iris[,2])
sum_Petal.Length <- sum(iris[,3])
sum_Petal.Width <- sum(iris[,4])
print(sum_Sepal.Length)
print(sum_Sepal.Width)
print(sum_Petal.Length)
print(sum_Petal.Width)
}
row[1]
iris
head(iris,10)
sum(iris[1,-5])
for (i in iris[1,-5]){
sum_i1 <- sum(i)
print(i)
}
for (i in iris[1,-5]){
sum_i1 <- sum(i)
print(sum_i1)
}
iris
for (i in iris[1,-5:6]){
sum_i1 <- sum(i)
print(sum_i1)
}
sum(iris[1,-5])
iris[1,1:4]
for (i in iris[1,1:4]){
sum_i1 <- sum(i)
print(sum_i1)
}
rep(1:10,2)
rep(1:10,2,3)
ncol(iris)
for (i in iris[,1:4]){
sum_i1 <- sum(i)
print(sum_i1)
}
for (i in iris[,1:4]){
sum_i <- sum(i)
print(sum_i)
}
for (j in iris[1:150,]){
sum_j <- sum(j)
print(sum_j)
}
for (j in iris[1:150,1:4]){
sum_j <- sum(j)
print(sum_j)
}
iris[1:150,1:4]
for (j in iris[1:150,]){
sum_j <- sum[j,1:4]
print(sum_j)
}
for (j in iris[1:150,]){
sum_j <- sum(iris[j,1:4])
print(sum_j)
}
sum(iris[1,1:4])
sum(iris[2,1:4])
head(iris)
for (j in iris[1:150,]){
sum_j <- sum(iris[j,1:4])
print(sum_j)
}
iris[1:150,1:4]
for (j in iris[1:150,]){
sum_j <- sum(iris[j,1:4])
print(sum_j)
}
for (j in (1:150)){
sum_j <- sum(iris[j,1:4])
print(sum_j)
}
nrow(iris)
for (j in (1:nrow(iris))){
print(j)
}
iris <- iris[,-6]
iris
for (j in (1:nrow(iris))){
sum_j <- sum(iris[j,-5])
print(j)
}
for (j in (1:nrow(iris))){
sum_j <- sum(iris[j,-5])
print(sum_j)
}
for (k in (1:nrow(iris))){
for (m in (1:4)){
print(k)
print(m)
}
}
help(total)
for (k in (1:nrow(iris))){
l <- 0
for (m in (1:4)){
#초기화 해두고 시작, col4까지 반복 후 끝내놓고 다음 col 넘어가야 함
#l <- iris[k,m]
l <- l + iris[k,m]
}
l
}
for (k in (1:nrow(iris))){
l <- 0
for (m in (1:4)){
#초기화 해두고 시작, col4까지 반복 후 끝내놓고 다음 col 넘어가야 함
#l <- iris[k,m]
l <- l + iris[k,m]
}
print(l)
}
for (a in (1:9)){
c <- 0
for (b in 1:9){
c <- a*b
}
print(c)
}
for (a in (1:9)){
for (b in 1:9){
c <- a*b
}
print(c)
}
for (a in (1:9)){
for (b in 1:9){
c <- a*b
print(c)
}
}
for (a in (1:9)){
for (b in 1:9){
c <- a*b
print(c)
}
}
for (j in (1:nrow(iris))){
sum_j <- sum(iris[j,-5])
print(sum_j)
}
str(iris)     #iris의 데이터 형태 (row 5개, 150 observations)
rm(list=ls())
?attitude
library(reshape)
attitude
str(attitude)
summary(attitude)
cor(attitude)
round(cor(attitude),3)
pairs(attitude)
install.packages(psych)
install.packages("psych")
library(psych)
pairs.panels(attidue)
pairs.panels(attitude)
pairs(attitude)   #산점도
pairs.panels(attitude)   #산점도와 상관관계 등을 한꺼번에 볼 수 있다
hist(attitude$rating)
pairs.panels(attitude)   #산점도와 상관관계 등을 한꺼번에 볼 수 있다
x <- c(1:10)
y <- x^2
plot(x,y)
cor(x,y)
cor(x,sqrt(y))
cor(x,y,method="kendall")
cor(x,y,method="spearman")
cor.test(attitude$rating, attitude$complaints)
cars
setwd("C:/Users/Youhee Choi/Desktop/R과통계/4_특강_R과통계/data/data")
cars <- read.csv("cars.csv")
str(cars)
summary(cars)
plot(cars)
out <- lm(dist~speed, data=cars)   #lm = linear model (선형 모델) #종속변수~설명변수
summary(out)
out2 <- lm(dist~0+speed, data=cars)
summary(out2)
plot(out2)
plot(out2)
plot(dist~speed, cars)
plot(log(dist)~speed,cars)
plot(dist~speed, cars)
plot(log(dist)~speed,cars)
plot(sqrt(dist)~speed, cars)
out3 <- lm(sqrt(dist)~0+speed, data+cars)
out3 <- lm(sqrt(dist)~0+speed, data=cars)
summary(out3)
plot(out3)
out2 <- lm(sqrt(dist)~0+speed, data=cars)
summary(out2)
plot(out2)
new <- data.frame("speed"=c(10,30))
new
predict(out2, new)  #out2의 모델에서, 새로운 변수인 enw를 넣어서 predict한다
predict(out2, new)^2
predict(out2, new, interval="confidence")
fitted(out2)
cbind(cars,fitted(out2))
plot(car$speed, fitted(out2))
plot(cars$speed, fitted(out2))
fitted(out2)
plot(dist~speed, cars)
new2 <- data.frame("speed"=c(50))
predict(out2, new2)
plot(out)
sonata <- read.csv("sonata.csv")
str(sonata)
summary(sonata)
plot(sonata)
pairs.panels(sonata)
out3
out4 <- lm(odometer~price, data=sonata)
out4 <- lm(Odometer~Price, data=sonata)
out4
summary(out4)
out4 <- lm(Odometer~0+Price, data=sonata)
summary(out4)
summary(out4)
summary(out4)
plot(out4)
plot(out4)
fitted(out4)
new3 <- data.frame("Odometer"=3600)
predict(out4, new3, interval="confidence")
plot(sonata)
pairs.panels(sonata)
out4 <- lm(Price~Odometer, data=sonata)
out4 <- lm(Price~0+Odometer, data=sonata)
summary(out4)
new3 <- data.frame("Odometer"=3600)
predict(out4, new3, interval="confidence")
cor(sonata$Price, sonata$Odometer)
plot(Price~Odometer, sonata)
cor(sonata$Price, sonata$Odometer)
out4 <- lm(Price~Odometer, data=sonata)
summary(out4)
plot(out4)
predict(out4, data.frame("Odometer"=36), interval="confidence")
predict(out4, data.frame("Odometer"=36), interval="prediction")
salary <- read.csv("salary.csv")
head(salary)
summary(salary)
pairs.panels(salary)
pairs(salary)
pairs.panels(salary)
model <- lm(salary~experience+score, data=salary)  #3개변수
summary(model)
summary(lm(salary~experience, data=salary))
plot(model)
head(salary)
pairs.panels(salary, col=2)
cl <- rep(1,20)
cl
cl[2] = 2
pairs(salary,col=cl)
pairs(salary,col=cl,pch=cl)
pairs(salary,col=cl)
pairs(salary,col=cl,pch=cl)
model2 <- lm(salary~., data=salary[-2,])
summary(model2)
plot(model2)
interval="confidence")
predict(model, data.frame("experience"=c(5,10), "score"=c(80,70)),
interval="confidence")
predict(model, data.frame("experience"=c(5,10), "score"=c(80,70)),
interval="prediction")
attitude
cor(attidue)
cor(attitude)
round(cor(attitude),3)
summary(lm(rating~complaintslearning),attitude))
summary(lm(rating~complaintslearning),attitude)
summary(lm(rating~compla+intslearning),attitude)
summary(lm(rating~complaints+learning),attitude)
summary(lm(rating~complaints+learning), attitude)
summary(lm(rating~complaints+learning), attitude)
summary(lm(rating~complaints+learning,attitude))
plot(attitude[,c(1,2,4)])
View(salary)
out
out11 <- lm(rating~., attitude)
summary(out11)
out12 <- lm(rating~.-critical, attitude)
summary(out12)
anova(out11)
backward <- step(out11, direction="backward")
backward <- step(out11, direction="backward", trace=FALSE)
backward
backward <- step(out11, direction="backward", trace=2)
backward <- step(out11, direction="backward", trace=2)
install.packages("leaps")
library(leaps)
leaps <- regsubsets(rating~., data=attitude, nbest=5)
leaps
summary(leaps)
leaps
plot(leaps)
plot(leaps, scale="adjr2")
plot(leaps)
plot(leaps, scale="adjr2")
plot(leaps)
laquinta <- call.csv("laquinta.csv")
laquinta <- read.csv("laquinta.csv")
laq <- read.csv("laquinta.csv")
summary(laq)
plot(laq)## sonata <- sonata[,-3] <- color이라는 의미없는 변수를 삭제
out15 <- lm(rating~., laq)
out15 <- lm(Margin~., laq)
summary(out15)
plot(out15)
pairs.panels(out15)
pairs.panels(out15)
pairs.panels(laq)
summary(laq)
predict(laq, data.frame("Number"=3815, "Nearest"=0.9, "Office.Space"=476,
"Enrollment"=24.5, "Income"=35, "Distance"=11.2),
interval="confidence")
predict(laq, data.frame("Number"=3815, "Nearest"=0.9, "Office.Space"=476,
"Enrollment"=24.5, "Income"=35, "Distance"=11.2),
interval="confidence")
ex <-data.frame("Number"=3815, "Nearest"=0.9, "Office.Space"=476,
"Enrollment"=24.5, "Income"=35, "Distance"=11.2)
ex
summary(laq)
predict(laq, data.frame("Number"=3815, "Nearest"=0.9, "Office.Space"=476,
"Enrollment"=24.5, "Income"=35, "Distance"=11.2),
interval="confidence")
predict(out15, data.frame("Number"=3815, "Nearest"=0.9, "Office.Space"=476,
"Enrollment"=24.5, "Income"=35, "Distance"=11.2),
interval="confidence")
leaps2 <- regsubsets(Margin~., laq)
leaps2
plot(leaps2)
plot(leaps2, scale="adjr2")
plot(laq)
out15 <- lm(Margin~., laq)
summary(out15)
plot(out15)
pairs.panels(laq)
round(cor(laq),3)
summary(out15)
predict(out15, data.frame("Number"=3815, "Nearest"=0.9, "Office.Space"=476,
"Enrollment"=24.5, "Income"=35, "Distance"=11.2),
interval="confidence")
plot(leaps2)
movie <- read.csv("movie.csv")
mov <- read.csv("movie_MBA2.csv")
summary(mov)
(mov)
## rating이 total_seen에 영향을 주는지 확인해 보자!
hist(movie$total_seen)
hist(mov$total_seen)
hist(log(mov$total_seen))
out21 <- lm(log(total_seen)~rating, data)   #이렇게만 보면 분산분석인지~ 다중인지~ 모름!
out21 <- lm(log(total_seen)~rating, mov)   #이렇게만 보면 분산분석인지~ 다중인지~ 모름!
summary(out21)
summary(out21)
install.packages("multcomp")
library(multcomp)
dunnett <- glht(out21, linfct=mcp(rating="Dunnett"))
summary(dunnett)
tukey <- glht(out21, linfct=mcp(rating="Tukey"))
summary(tukey)
mov$rating2 <- mov$rating
levels(mov$rating2)
levels(mov$rating2)=c(2,2,1,3)
summary(mov$rating2)
out22 <- lm(log(total_seen)~rating2, mov)
summary(out22)
levels(mov$rating2)
mov$rating2 <- relevel(mov$rating2, ref="1")  #1번을 reference group으로 잡는다
out22 <- lm(log(total_seen)~rating2, mov)
summary(out22)
anx <- call.csv("anorexia.csv")
anx <- read.csv("anorexia.csv")
summary(anx)
str(anx)
out23 <- lm(Postwt~Prewt~Treat, anx)
out23 <- lm(Postwt-Prewt~Treat, anx)
summary(out23)
out31 <- lm(Postwt-Prewt~Treat, anx)
summary(out31)
out32 <- lm(Postwt-Prewt~Prewt+Treat, anx)
summary(out32)
boxplot(Prewt~Treat, anx)
anova(out32)
forb <- read.csv("Forbes500.csv")
str(forb)
summary(forb)
str(forb)
out41 <- lm(log(Sales)~., forb)
summary(out41)
out41 <- lm(log(Sales)~Sector, forb)
summary(out41)
out41 <- lm(log(Sales)~Sector, forb)
str(forb)
out41 <- lm(log(Sales)~sector, forb)
summary(out41)
boxplot(Sales~sector, forb)
dunnett <- glht(out41, linfct=mcp(rating="Dunnett"))
dunnett <- glht(out41, linfct=mcp(rating="Dunnett"))
str(forb)
out42 <- lm(Sales~Assets, forb)
plot(Sales~Assets, forb)
out43 <- lm(log(Sales)~log(Assets), forb)
plot(out43)
plot(Sales~Assets, forb)
plot(out43)
out44 <- lm(log(Sales)~log(Assets)+sector, forb)
out41 <- lm(log(Sales)~sector, forb)
summary(out41)
boxplot(Sales~sector, forb)
dunnett <- glht(out41, linfct=mcp(rating="Dunnett"))
summary(dunnett)
?dunnett
dunnett2 <- glht(out41, linfct=mcp(sector="Dunnett"))
summary(dunnett2)
out42 <- lm(Sales~Assets, forb)
plot(Sales~Assets, forb)
out43 <- lm(log(Sales)~log(Assets), forb)
plot(out43)
forb$sector <- factor(forb$sector)
forb$sector <- relevel(forb$sector, ref="HiTech")
boxplot(Sales~sector, forb)
boxplot(log(Sales)~sector, forb)
out41 <- lm(log(Sales)~sector, forb)
summary(out41)
dunnett2 <- glht(out41, linfct=mcp(sector="Dunnett"))
summary(dunnett2)
out44 <- lm(log(Sales)~Assets+sector, forb)
summary(out44)
dunnett3 <- glht(out44, linfct=mcp(sector="Dunnett"))
summary(dunnett3)
