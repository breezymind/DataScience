library(randomForest)
library(caret)
library(ROCR)
cb <- read.delim("../1022_Decision Tree_2/Hshopping.txt", stringsAsFactors = F)
head(cb)
str(cb)
cb$반품여부 <- factor(cb$반품여부)
set.seed(1)
inTring <- createDataPartition(y=cb$반품여부,p=0.6,list=F)
cb <- read.delim("../1022_Decision Tree_2/Hshopping.txt", stringsAsFactors = F)
cb$반품여부 <- factor(cb$반품여부)
set.seed(1)
inTrin <- createDataPartition(y=cb$반품여부,p=0.6,list=F)
inTrin
cb.train <- cb[inTrin,]
cb.test <- cb[-inTrin,]
nrow(cb)
nrow(cb.train)
nrow(cb.test)
set.seed(123)
head(cb)
rf_model <- randomForest(반품여부 ~ -ID,data=cb.train,ntree=50,mtry=2)
cb <- read.delim("../1022_Decision Tree_2/Hshopping.txt", stringsAsFactors = F)
cb$반품여부 <- factor(cb$반품여부)
set.seed(1)
inTrin <- createDataPartition(y=cb$반품여부,p=0.6,list=F)
cb.train <- cb[inTrin,]
cb.test <- cb[-inTrin,]
nrow(cb.train)
nrow(cb.test)
set.seed(123)
rf_model <- randomForest(반품여부 ~ -ID,data=cb.train,ntree=50,mtry=2)
rf_model <- randomForest(반품여부 ~. -ID,data=cb.train,ntree=50,mtry=2)
rf_model
plot(rf_model)
importance(rf_model)
varImpPlot(rf_model)
cb.test$rf_pref <- predict(rf_model,cb.test,type="response")
confusionMatrix(cb.test$rf_pref, cb.test$반품반품여부)
confusionMatrix(cb.test$rf_pref, cb.test$품여부)
confusionMatrix(cb.test$rf_pref, cb.test$반품여부)
cb.test$rf_pref_prob <- predict(rf_model,cb.test,type="prob")
head(cb.test)
cb.test$rf_pref_prob[,2]
head(cb.test$rf_pref_prob[,2])
head(cb.test$rf_pref_prob)
str(cb.test)
rf_preb <- prediction(cb.test$rf_pref_prob[,2],cb.test$반품여부)
rf_preb <- prediction(cb.test$rf_pref_prob[,2], cb.test$반품여부)
rf_preb
head(rf_preb)
str(rf_pref_prob)
str(rf_preb)
rf_preb
performance(rf_pred, "tpr", "fpr")
performance(rf_pred, "tpr", "fpr")
performance(rf_preb, "tpr", "fpr")
rf_model.perf1 <- performance(rf_preb,"tpr","fpr")
rf_model.perf2 <- performance(rf_preb, "lift", "rpp")
plot(rf_model.perf1, colorize=T)
par(mfrow=c(1,2))
plot(rf_model.perf1, colorize=TRUE); abline(a=0, b=1, lty=3)
plot(rf_model.perf2, colorize=TRUE); abline(v=0.4, lty=3)
performance(rf_preb,"auc")
performance(rf_preb,"auc")@y.values
performance(rf_preb,"auc")@y.values[[1]]
performance(rf_preb,"auc")@y.names[[1]]
performance(rf_preb,"auc")@y.name[[1]]
library(e1071)
library(caret)
library(ROCR)
cb <- read.delim("../1022_Decision Tree_2/Hshopping.txt", stringsAsFactors = F)
cb$반품여부 <- factor(cb$반품여부)
set.seed(1)
inTrin <- createDataPartition(y=cb$반품여부,p=0.6,list=F)
cb.train <- cb[inTrin,]
cb.test <- cb[-inTrin,]
nrow(cb.train)
nrow(cb.test)
head(cb)
svm_model <- svm(반품여부 ~ 성별+나이+구매금액+출연자,data=cb.train, cost=100, gamma=1, probability =T)
svm_model <- svm(반품여부 ~ 성별+나이+구매금액+출연자,data=cb.train, cost=100, gamma=1, probability =T)
svm_model
summary(svm_model)
plot(svm_model, data=cb.train, 구매금액~나이)
plot(svm_model, data=cb.train, 출연자~나이)
importance(svm_model)
cb.test$svm_pred <- predict(svm_model, cb.test)
head(cb.test)
confusionMatrix(cb.test$svm_pred, cb.test$반품여부)
postResample(cb.test$svm_pred, cb.test$REFUND)
postResample(cb.test$svm_pred, cb.test$반품여부)
tune.svm(반품여부 ~ 성별+나이+구매금액+출연자, data=cb.train, gamma = seq(.5,.9,by=.1), cost=seq(100,1000,by=1000))
tune.svm(반품여부 ~ 성별+나이+구매금액+출연자, data=cb.train, gamma = seq(.5,.9,by=.1), cost=seq(100,1000,by=1000))
tune.svm(반품여부 ~ 성별+나이+구매금액+출연자, data=cb.train, gamma = seq(.5,.9,by=.1), cost=seq(100,1000,by=1000))
tune.svm(반품여부 ~ 성별+나이+구매금액+출연자, data=cb.train, gamma = seq(.5,.9,by=.1), cost=seq(100,1000,by=1000))
tune.svm(반품여부 ~ 성별+나이+구매금액+출연자, data=cb.train, gamma = seq(.5,.9,by=.1), cost=seq(100,1000,by=1000))
tune.svm(반품여부 ~ 성별+나이+구매금액+출연자, data=cb.train, gamma = seq(.5,.9,by=.1), cost=seq(100,1000,by=1000))
tune.svm(반품여부 ~ 성별+나이+구매금액+출연자, data=cb.train, gamma = seq(.5,.9,by=.1), cost=seq(100,1000,by=1000))
cb <- read.delim("../1022_Decision Tree_2/Hshopping.txt", stringsAsFactors = F)
cb$반품여부 <- factor(cb$반품여부)
set.seed(1)
flds <- createFolds(cb$반품여부,k=5,list=T,returnTrain=F)
flds <- createFolds(cb$반품여부,k=5,list=T,returnTrain=F)
flds
flds <- createFolds(cb$반품여부,k=5,list=F,returnTrain=F)
flds
flds <- createFolds(cb$반품여부,k=5,list=T,returnTrain=F)
flds <- createFolds(cb$반품여부,k=5,list=T,returnTrain=T)
flds
flds <- createFolds(cb$반품여부,k=5,list=T,returnTrain=F)
flds
experiment <- function(train, test, m) {
rf <- randomForest(REFUND ~ .-ID, data=train, ntree=50)
rf_pred <- predict(rf, test, type="response")
m$acc = c(m$acc, confusionMatrix(rf_pred, test$REFUND)$overall[1])
print(m)
rf_pred_prob <- predict(rf, test, type="prob")
rf_pred <- prediction(rf_pred_prob[,2], cb.test$REFUND)
m$auc = c(m$auc, performance(rf_pred, "auc")@y.values[[1]])
return(m)
}
inTest <- flds[[1]]
cb.test <- cb[inTest,]
cb.train <- cb[-inTest,]
experiment(cb.train,cb.test,measure)
experiment <- function(train, test, m) {
rf <- randomForest(반품여부 ~ .-ID, data=train, ntree=50)
rf_pred <- predict(rf, test, type="response")
m$acc = c(m$acc, confusionMatrix(rf_pred, test$REFUND)$overall[1])
print(m)
rf_pred_prob <- predict(rf, test, type="prob")
rf_pred <- prediction(rf_pred_prob[,2], cb.test$REFUND)
m$auc = c(m$auc, performance(rf_pred, "auc")@y.values[[1]])
return(m)
}
experiment(cb.train,cb.test,measure)
measure = experiment(cb.train,cb.test,measure)
measure = list()
measure = experiment(cb.train,cb.test,measure)
rf <- randomForest(반품여부 ~ .-ID, data=cb.train, ntree=50)
rf_pred <- predict(rf, cb.test, type="response")
head(tf_pred)
head(rf_pred)
rf_pred
confusionMatrix(rf_pred, cb.test$반품여부)$overall[1]
